{"version":3,"sources":["SpaceX-Logo.png","components/LaunchItem.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LaunchItem","props","console","log","className","classNames","launch","launch_success","mission_name","format","launch_date_local","to","flight_number","LAUNCHES_QUERY","gql","Launches","query","loading","error","data","launches","map","key","Component","LAUNCH_QUERY","Launch","this","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","src","logo","alt","style","width","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.3f84fbf9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/SpaceX-Logo.950ba665.png\";","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport classNames from \"classnames\";\nimport Moment from \"react-moment\";\n\nexport default function LaunchItem(props) {\n  console.log(props);\n  return (\n    <div className=\"card card-body mb-3\">\n      <div className=\"row\">\n        <div className=\"col-md-9\">\n          <h4>\n            Misson:{\" \"}\n            <span\n              className={classNames({\n                \"text-success\": props.launch.launch_success,\n                \"text-danger\": !props.launch.launch_success,\n              })}\n            >\n              {props.launch.mission_name}\n            </span>\n          </h4>\n          <p>\n            Date:{\" \"}\n            <Moment format=\"YYYY-MM-DD HH:MM\">\n              {props.launch.launch_date_local}\n            </Moment>\n          </p>\n        </div>\n        <div className=\"col-md-3\">\n          <Link\n            className=\"btn btn-primary\"\n            to={`/launch/${props.launch.flight_number}`}\n          >\n            Details\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { Component, Fragment } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport LaunchItem from \"./LaunchItem\";\n\n// gql parses query strings into GraphQL-readable format\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`;\n\nexport class Launches extends Component {\n  render() {\n    return (\n      <Fragment>\n        <h1 className=\"display-4 my-3\">Launches</h1>\n        <Query query={LAUNCHES_QUERY}>\n          {({ loading, error, data }) => {\n            if (loading) {\n              return <h4>Loading...</h4>;\n            }\n            if (error) {\n              console.log(error);\n            }\n            return (\n              <Fragment>\n                {data.launches.map((launch) => (\n                  <LaunchItem key={launch.flight_number} launch={launch} />\n                ))}\n              </Fragment>\n            );\n          }}\n        </Query>\n      </Fragment>\n    );\n  }\n}\n\nexport default Launches;\n","import React, { Component, Fragment } from \"react\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport { Link } from \"react-router-dom\";\nimport classNames from \"classnames\";\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_success\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\nexport class Launch extends Component {\n  render() {\n    let { flight_number } = this.props.match.params; // way to access params\n    flight_number = parseInt(flight_number);\n    return (\n      <Fragment>\n        {/* need to add variables when passing arguments to gql */}\n        <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\n          {({ loading, error, data }) => {\n            if (loading) {\n              return <h4>Loading...</h4>;\n            }\n            if (error) {\n              console.log(error);\n            }\n            const {\n              flight_number,\n              mission_name,\n              launch_year,\n              launch_success,\n              rocket: { rocket_id, rocket_name, rocket_type },\n            } = data.launch;\n            return (\n              <div>\n                <h1 className=\"display-4 my-3\">\n                  <span className=\"text-info\">Mission: </span>\n                  {mission_name}\n                </h1>\n                <h4 className=\"mb-3\">Launch Details</h4>\n                <ul className=\"list-group\">\n                  <li className=\"list-group-item\">\n                    Flight Number: {flight_number}\n                  </li>\n                  <li className=\"list-group-item\">\n                    Launch Year: {launch_year}\n                  </li>\n                  <li className=\"list-group-item\">\n                    Successful:{\" \"}\n                    <span\n                      className={classNames({\n                        \"text-success\": launch_success,\n                        \"text-danger\": !launch_success,\n                      })}\n                    >\n                      {launch_success ? \"Yes\" : \"No\"}\n                    </span>\n                  </li>\n                </ul>\n                <h4 className=\"my-3\">Rocket Details</h4>\n                <ul className=\"list-group\">\n                  <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n                  <li className=\"list-group-item\">\n                    Rocket Name: {rocket_name}\n                  </li>\n                  <li className=\"list-group-item\">\n                    Rocket Type: {rocket_type}\n                  </li>\n                </ul>\n                <hr />\n                <Link to=\"/\" className=\"btn btn-danger\">\n                  Back\n                </Link>\n              </div>\n            );\n          }}\n        </Query>\n      </Fragment>\n    );\n  }\n}\n\nexport default Launch;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Launches from \"./components/Launches\";\nimport Launch from \"./components/Launch\";\n\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\n\nimport \"./App.css\";\nimport \"./bootstrap.min.css\";\nimport logo from \"./SpaceX-Logo.png\";\n\nconst client = new ApolloClient({\n  uri: \"/graphql\",\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <img src={logo} alt=\"SpaceX\" style={{ width: 300 }} />\n          <h1>Spaceman says everybody look down</h1>\n          <Route exact path=\"/\" component={Launches} />\n          <Route path=\"/launch/:flight_number\" component={Launch} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}